cmake_minimum_required(VERSION 3.6)

project (SharkUtil)


if(WIN32)
	if(CMAKE_CONFIGURATION_TYPES)
		set(CMAKE_CONFIGURATION_TYPES Debug Release)
	 endif()

	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3")
	add_definitions(-D_SCL_SECURE_NO_WARNINGS)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif(WIN32)

if(UNIX)	
	add_definitions(-Wall)
	include(CheckCXXCompilerFlag)
	CHECK_CXX_COMPILER_FLAG(-std=c++11 HAVING_COMPILER_SUPPORTS_CXX11)
	if(HAVING_COMPILER_SUPPORTS_CXX11)
		add_definitions(-std=c++11)
	else(HAVING_COMPILER_SUPPORTS_CXX11)
		CHECK_CXX_COMPILER_FLAG(-std=c++0x HAVING_COMPILER_SUPPORTS_CXX0X)
		if(HAVING_COMPILER_SUPPORTS_CXX0X)
			add_definitions(-std=c++0x)
		else(HAVING_COMPILER_SUPPORTS_CXX0X)
			message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
		endif(HAVING_COMPILER_SUPPORTS_CXX0X)
	endif(HAVING_COMPILER_SUPPORTS_CXX11)
endif(UNIX)

FIND_PACKAGE(PythonInterp)
FIND_PACKAGE(PythonLibs)
message(STATUS "PYTHON_INCLUDE_DIRS: " ${PYTHON_INCLUDE_DIRS})
message(STATUS "PYTHON_LIBRARIES: " ${PYTHON_LIBRARIES})
message(STATUS "PYTHON_LIB_VERSION: " ${PYTHONLIBS_VERSION_STRING})

# message(STATUS "env: " $ENV{CONDA_PREFIX} )
SET(CONDA_ENV $ENV{CONDA_PREFIX})
IF(IS_DIRECTORY ${CONDA_ENV})
	SET(CONDA_ENV_INCLUDE ${CONDA_ENV}/include)
	SET(CONDA_ENV_LIB_DIR ${CONDA_ENV}/lib)
ELSE()
	get_filename_component(CONDA_ENV_INCLUDE ${PYTHON_INCLUDE_DIRS} DIRECTORY)  
	get_filename_component(CONDA_ENV_LIB_DIR ${PYTHON_LIBRARIES} DIRECTORY )
ENDIF()

MESSAGE(STATUS "CONDA_ENV_INCLUDE: ${CONDA_ENV_INCLUDE} CONDA_ENV_LIB_DIR: ${CONDA_ENV_LIB_DIR}")

INCLUDE_DIRECTORIES(SYSTEM ${CONDA_ENV_INCLUDE} ${PYTHON_INCLUDE_DIRS})


IF(IS_DIRECTORY ${PYTHON_INCLUDE_DIRS}/pybind11)
    INCLUDE_DIRECTORIES(SYSTEM ${PYTHON_INCLUDE_DIRS}/pybind11)
else()
    IF(IS_DIRECTORY ${CONDA_ENV_INCLUDE}/pybind11)
        INCLUDE_DIRECTORIES(SYSTEM ${CONDA_ENV_INCLUDE}/pybind11)
    else()
        message(FATAL_ERROR "Please install pybind11 first with: conda install pybind11")
    endif()
endif()


if(SKBUILD)
  # set(CMAKE_INSTALL_RPATH "${Boost_LIBRARY_DIR_RELEASE};${PYTHON_LIBRARIES_DIR}")
    set(CMAKE_INSTALL_RPATH "${CONDA_ENV_LIB_DIR}")
    message(STATUS "Using scikit-build, RPATH:${CMAKE_CURRENT_SOURCE_DIR}/..")
else()

    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/..)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR}/..)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/..)

    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/..)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR}/..)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/..)

endif()

SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
SET(CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -fvisibility=hidden")

## SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fvisibility=hidden")

set(source_dir ${CMAKE_CURRENT_SOURCE_DIR})
PYTHON_ADD_MODULE(SharkUtil ${source_dir}/sum_tree_base.cpp 
							${source_dir}/util_py.cpp
							${source_dir}/prio_experience.cpp)
TARGET_LINK_LIBRARIES(SharkUtil ${PYTHON_LIBRARIES}) 

install(TARGETS SharkUtil LIBRARY DESTINATION shark)




